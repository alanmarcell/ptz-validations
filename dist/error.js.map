{"version":3,"sources":["../dist-esnext/error.js"],"names":["P","sameError","curry","a","b","propName","errorMsg","containsError","error","errors","any","addError","obj","isNil","isNilOrEmpty","assoc","concat"],"mappings":";;;;;;;AAAA;;IAAYA,C;;AACZ;;;;;;;;AACA;;;AAGO,IAAMC,gCAAY,gBAAEC,KAAF,CAAQ,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUD,EAAEE,QAAF,KAAeD,EAAEC,QAAjB,IAA6BF,EAAEG,QAAF,KAAeF,EAAEE,QAAxD;AAAA,CAAR,CAAlB;AACP;;;;;AAKO,IAAMC,wCAAgB,SAAhBA,aAAgB,CAACC,KAAD,EAAQC,MAAR;AAAA,WAAmB,gBAAEC,GAAF,CAAMT,UAAUO,KAAV,CAAN,EAAwBC,UAAU,EAAlC,CAAnB;AAAA,CAAtB;AACP;;;AAGO,IAAME,8BAAW,gBAAET,KAAF,CAAQ,UAACU,GAAD,EAAMP,QAAN,EAAgBC,QAAhB,EAA6B;AACzD,QAAME,QAAQ,EAAEH,kBAAF,EAAYC,kBAAZ,EAAd;AACA,QAAI,gBAAEO,KAAF,CAAQD,GAAR,CAAJ,EACI,OAAO,EAAEH,QAAQ,CAACD,KAAD,CAAV,EAAP;AACJ,QAAIR,EAAEc,YAAF,CAAeF,IAAIH,MAAnB,CAAJ,EACI,OAAO,gBAAEM,KAAF,CAAQ,QAAR,EAAkB,CAACP,KAAD,CAAlB,EAA2BI,GAA3B,CAAP;AACJ,QAAIL,cAAcC,KAAd,EAAqBI,IAAIH,MAAzB,CAAJ,EACI,OAAOG,GAAP;AACJ,QAAMH,SAASG,IAAIH,MAAJ,CAAWO,MAAX,CAAkBR,KAAlB,CAAf;AACA,WAAO,gBAAEO,KAAF,CAAQ,QAAR,EAAkBN,MAAlB,EAA0BG,GAA1B,CAAP;AACH,CAVuB,CAAjB;AAWP","file":"error.js","sourcesContent":["import * as P from 'ptz-fp';\nimport R from 'ramda';\n/**\n * Compares if to errors are the same.\n */\nexport const sameError = R.curry((a, b) => a.propName === b.propName && a.errorMsg === b.errorMsg);\n/**\n * Checks if a list of errors contains some error.\n * @param error\n * @param errors\n */\nexport const containsError = (error, errors) => R.any(sameError(error), errors || []);\n/**\n * Add error to obj.errors\n */\nexport const addError = R.curry((obj, propName, errorMsg) => {\n    const error = { propName, errorMsg };\n    if (R.isNil(obj))\n        return { errors: [error] };\n    if (P.isNilOrEmpty(obj.errors))\n        return R.assoc('errors', [error], obj);\n    if (containsError(error, obj.errors))\n        return obj;\n    const errors = obj.errors.concat(error);\n    return R.assoc('errors', errors, obj);\n});\n//# sourceMappingURL=error.js.map"]}