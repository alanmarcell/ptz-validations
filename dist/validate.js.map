{"version":3,"sources":["../dist-esnext/validate.js"],"names":["validateString","isValidEmail","validateEmail","propValidation","validate","context","errors","required","data","length","push","propName","errorMsg","requiredError","REQUIRED","minLength","minLengthError","MIN_LENGTH","maxLength","maxLengthError","MAX_LENGTH","toLowerCase","toUpperCase","email","re","test","stringValidation","INVALID_EMAIL"],"mappings":";;;;;QACgBA,c,GAAAA,c;QAkCAC,Y,GAAAA,Y;QAIAC,a,GAAAA,a;;AAvChB;;;;;;AACO,SAASF,cAAT,CAAwBG,cAAxB,EAAwC;AAC3C,aAASC,QAAT,CAAkBC,OAAlB,EAA2B;AACvB,YAAIA,QAAQC,MAAR,IAAkB,IAAtB,EACID,QAAQC,MAAR,GAAiB,EAAjB;AACJ,YAAIH,eAAeI,QAAf,KAA4BF,QAAQG,IAAR,IAAgB,IAAhB,IAAwBH,QAAQG,IAAR,CAAaC,MAAb,KAAwB,CAA5E,CAAJ,EAAoF;AAChFJ,oBAAQC,MAAR,CAAeI,IAAf,CAAoB;AAChBC,0BAAUN,QAAQM,QADF;AAEhBC,0BAAUT,eAAeU,aAAf,IAAgC,oBAAUC;AAFpC,aAApB;AAIA,mBAAOT,OAAP;AACH;AACD,YAAIA,QAAQG,IAAR,IAAgB,IAApB,EACI,OAAOH,OAAP;AACJ,YAAIA,QAAQG,IAAR,CAAaC,MAAb,GAAsBN,eAAeY,SAAzC,EACIV,QAAQC,MAAR,CAAeI,IAAf,CAAoB;AAChBC,sBAAUN,QAAQM,QADF;AAEhBC,sBAAUT,eAAea,cAAf,IAAiC,oBAAUC;AAFrC,SAApB;AAIJ,YAAIZ,QAAQG,IAAR,CAAaC,MAAb,GAAsBN,eAAee,SAAzC,EACIb,QAAQC,MAAR,CAAeI,IAAf,CAAoB;AAChBC,sBAAUN,QAAQM,QADF;AAEhBC,sBAAUT,eAAegB,cAAf,IAAiC,oBAAUC;AAFrC,SAApB;AAIJ,YAAIjB,eAAekB,WAAnB,EACIhB,QAAQG,IAAR,GAAeH,QAAQG,IAAR,CAAaa,WAAb,EAAf;AACJ,YAAIlB,eAAemB,WAAnB,EACIjB,QAAQG,IAAR,GAAeH,QAAQG,IAAR,CAAac,WAAb,EAAf;AACJ,eAAOjB,OAAP;AACH;AACD,WAAO;AACHD,0BADG;AAEHD;AAFG,KAAP;AAIH;AACM,SAASF,YAAT,CAAsBsB,KAAtB,EAA6B;AAChC,QAAMC,KAAK,wJAAX,CADgC,CACqI;AACrK,WAAOA,GAAGC,IAAH,CAAQF,KAAR,CAAP;AACH;AACM,SAASrB,aAAT,CAAuBC,cAAvB,EAAuC;AAC1C,aAASC,QAAT,CAAkBC,OAAlB,EAA2B;AACvB,YAAMqB,mBAAmB;AACrBnB,sBAAUJ,eAAeI,QADJ;AAErBM,2BAAeV,eAAeU,aAFT;AAGrBQ,yBAAa;AAHQ,SAAzB;AAKAhB,kBAAUL,eAAe0B,gBAAf,EAAiCtB,QAAjC,CAA0CC,OAA1C,CAAV;AACA,YAAI,CAACJ,aAAaI,QAAQG,IAArB,CAAL,EACIH,QAAQC,MAAR,CAAeI,IAAf,CAAoB;AAChBC,sBAAUN,QAAQM,QADF;AAEhBC,sBAAU,oBAAUe;AAFJ,SAApB;AAIJ,eAAOtB,OAAP;AACH;AACD,WAAO;AACHD,0BADG;AAEHD;AAFG,KAAP;AAIH;AACD","file":"validate.js","sourcesContent":["import allErrors from './allErrors';\nexport function validateString(propValidation) {\n    function validate(context) {\n        if (context.errors == null)\n            context.errors = [];\n        if (propValidation.required && (context.data == null || context.data.length === 0)) {\n            context.errors.push({\n                propName: context.propName,\n                errorMsg: propValidation.requiredError || allErrors.REQUIRED\n            });\n            return context;\n        }\n        if (context.data == null)\n            return context;\n        if (context.data.length < propValidation.minLength)\n            context.errors.push({\n                propName: context.propName,\n                errorMsg: propValidation.minLengthError || allErrors.MIN_LENGTH\n            });\n        if (context.data.length > propValidation.maxLength)\n            context.errors.push({\n                propName: context.propName,\n                errorMsg: propValidation.maxLengthError || allErrors.MAX_LENGTH\n            });\n        if (propValidation.toLowerCase)\n            context.data = context.data.toLowerCase();\n        if (propValidation.toUpperCase)\n            context.data = context.data.toUpperCase();\n        return context;\n    }\n    return {\n        validate,\n        propValidation\n    };\n}\nexport function isValidEmail(email) {\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; // tslint:disable-line:max-line-length\n    return re.test(email);\n}\nexport function validateEmail(propValidation) {\n    function validate(context) {\n        const stringValidation = {\n            required: propValidation.required,\n            requiredError: propValidation.requiredError,\n            toLowerCase: true\n        };\n        context = validateString(stringValidation).validate(context);\n        if (!isValidEmail(context.data))\n            context.errors.push({\n                propName: context.propName,\n                errorMsg: allErrors.INVALID_EMAIL\n            });\n        return context;\n    }\n    return {\n        validate,\n        propValidation\n    };\n}\n//# sourceMappingURL=validate.js.map"]}