{"version":3,"sources":["../dist-esnext/README.test.js"],"names":["assert","V","describe","it","validateUser","validate","id","generateId","displayName","required","isString","min","max","userName","toLowerCase","password","email","isEmail","weight","isNumber","birthday","isDate","Date","user","expectedUser","errors","propName","errorMsg","ok","equal","toString","deepEqual"],"mappings":";;AACA;;IAAYA,M;;AACZ;;IAAYC,C;;;;AAFZ;AAGAC,SAAS,iBAAT,EAA4B,YAAM;AAC9BC,OAAG,oBAAH,EAAyB,YAAM;AAC3B,YAAMC,eAAeH,EAAEI,QAAF,CAAW;AAC5BC,gBAAI,CAACL,EAAEM,UAAH,CADwB;AAE5BC,yBAAa,CACTP,EAAEQ,QADO,EAETR,EAAES,QAFO,EAGTT,EAAEU,GAAF,CAAM,CAAN,CAHS,EAITV,EAAEW,GAAF,CAAM,GAAN,CAJS,CAFe;AAQ5BC,sBAAU,CACNZ,EAAEQ,QADI,EAENR,EAAES,QAFI,EAGNT,EAAEU,GAAF,CAAM,CAAN,CAHM,EAINV,EAAEW,GAAF,CAAM,EAAN,CAJM,EAKNX,EAAEa,WALI,CARkB;AAe5BC,sBAAU,CACNd,EAAEQ,QADI,EAENR,EAAES,QAFI,EAGNT,EAAEU,GAAF,CAAM,CAAN,CAHM,EAINV,EAAEW,GAAF,CAAM,EAAN,CAJM,CAfkB;AAqB5BI,mBAAO,CACHf,EAAEQ,QADC,EAEHR,EAAEgB,OAFC,CArBqB;AAyB5BC,oBAAQ,CACJjB,EAAEkB,QADE,EAEJlB,EAAEU,GAAF,CAAM,CAAN,CAFI,EAGJV,EAAEW,GAAF,CAAM,IAAN,CAHI,CAzBoB;AA8B5BQ,sBAAU,CACNnB,EAAEoB,MADI,EAENpB,EAAEU,GAAF,CAAM,IAAIW,IAAJ,CAAS,YAAT,CAAN,CAFM,EAGNrB,EAAEW,GAAF,CAAM,IAAIU,IAAJ,EAAN,CAHM;AA9BkB,SAAX,CAArB;AAoCA,YAAMC,OAAOnB,aAAa;AACtBS,sBAAU,aADY;AAEtBE,sBAAU,MAFY;AAGtBC,mBAAO,uBAHe;AAItBE,oBAAQ,EAJc;AAKtBE,sBAAU;AALY,SAAb,CAAb;AAOA,YAAMI,eAAe;AACjBlB,gBAAI,SADa;AAEjBO,sBAAU,aAFO;AAGjBE,sBAAU,MAHO;AAIjBC,mBAAO,uBAJU;AAKjBE,oBAAQ,EALS;AAMjBE,sBAAU,IAAIE,IAAJ,CAAS,YAAT,CANO;AAOjBG,oBAAQ,CAAC;AACDC,0BAAU,aADT;AAEDC,0BAAU;AAFT,aAAD,EAGD;AACCD,0BAAU,UADX;AAECC,0BAAU;AAFX,aAHC;AAPS,SAArB;AAeA3B,eAAO4B,EAAP,CAAUL,KAAKjB,EAAf,EAAmB,aAAnB;AACAN,eAAO6B,KAAP,CAAaN,KAAKV,QAAlB,EAA4BW,aAAaX,QAAzC,EAAmD,cAAnD;AACAb,eAAO6B,KAAP,CAAaN,KAAKR,QAAlB,EAA4BS,aAAaT,QAAzC,EAAmD,cAAnD;AACAf,eAAO6B,KAAP,CAAaN,KAAKP,KAAlB,EAAyBQ,aAAaR,KAAtC,EAA6C,WAA7C;AACAhB,eAAO6B,KAAP,CAAaN,KAAKL,MAAlB,EAA0BM,aAAaN,MAAvC,EAA+C,YAA/C;AACAlB,eAAO6B,KAAP,CAAaN,KAAKH,QAAL,CAAcU,QAAd,EAAb,EAAuCN,aAAaJ,QAAb,CAAsBU,QAAtB,EAAvC,EAAyE,cAAzE;AACA9B,eAAO+B,SAAP,CAAiBR,KAAKE,MAAtB,EAA8BD,aAAaC,MAA3C,EAAmD,YAAnD;AACH,KAlED;AAmEH,CApED;AAqEA","file":"README.test.js","sourcesContent":["// Example used on README.md\nimport * as assert from 'ptz-assert';\nimport * as V from './index';\ndescribe('ptz-validations', () => {\n    it('createUser example', () => {\n        const validateUser = V.validate({\n            id: [V.generateId],\n            displayName: [\n                V.required,\n                V.isString,\n                V.min(2),\n                V.max(100)\n            ],\n            userName: [\n                V.required,\n                V.isString,\n                V.min(2),\n                V.max(40),\n                V.toLowerCase\n            ],\n            password: [\n                V.required,\n                V.isString,\n                V.min(6),\n                V.max(40)\n            ],\n            email: [\n                V.required,\n                V.isEmail\n            ],\n            weight: [\n                V.isNumber,\n                V.min(1),\n                V.max(1000)\n            ],\n            birthday: [\n                V.isDate,\n                V.min(new Date('1800-01-01')),\n                V.max(new Date())\n            ]\n        });\n        const user = validateUser({\n            userName: 'angeloocana',\n            password: 'abcd',\n            email: 'angeloocana@gmail.com',\n            weight: 90,\n            birthday: '1992-06-28'\n        });\n        const expectedUser = {\n            id: 'hfk397d',\n            userName: 'angeloocana',\n            password: 'abcd',\n            email: 'angeloocana@gmail.com',\n            weight: 90,\n            birthday: new Date('1992-06-28'),\n            errors: [{\n                    propName: 'displayName',\n                    errorMsg: 'ERROR_REQUIRED'\n                }, {\n                    propName: 'password',\n                    errorMsg: 'ERROR_MIN'\n                }]\n        };\n        assert.ok(user.id, 'generate id');\n        assert.equal(user.userName, expectedUser.userName, 'set userName');\n        assert.equal(user.password, expectedUser.password, 'set password');\n        assert.equal(user.email, expectedUser.email, 'set email');\n        assert.equal(user.weight, expectedUser.weight, 'set weight');\n        assert.equal(user.birthday.toString(), expectedUser.birthday.toString(), 'set birthday');\n        assert.deepEqual(user.errors, expectedUser.errors, 'add errors');\n    });\n});\n//# sourceMappingURL=README.test.js.map"]}