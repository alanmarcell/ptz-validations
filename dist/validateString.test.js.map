{"version":3,"sources":["../dist-esnext/validateString.test.js"],"names":["assert","V","describe","it","propName","propValidation","required","objToValidate","validatedObj","validateString","error","errorMsg","allErrors","REQUIRED","ok","containsError","errors","requiredError","undefined","notOk","minLength","MIN_LENGTH","minLengthError","maxLength","maxLengthError","MAX_LENGTH","toLowerCase","equal","toUpperCase"],"mappings":"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","file":"validateString.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport * as V from './index';\ndescribe('validateString', () => {\n    describe('required', () => {\n        describe('null', () => {\n            it('add default error msg when null', () => {\n                const propName = 'userName';\n                const propValidation = {\n                    required: true\n                };\n                const objToValidate = {\n                    [propName]: null\n                };\n                const validatedObj = V.validateString(propValidation, propName, objToValidate);\n                const error = { propName, errorMsg: V.allErrors.REQUIRED };\n                assert.ok(V.containsError(error, validatedObj.errors));\n            });\n            it('add custom error msg when null', () => {\n                const propName = 'userName';\n                const propValidation = {\n                    required: true,\n                    requiredError: 'CUSTOM_ERROR_MSG'\n                };\n                const objToValidate = {\n                    [propName]: null\n                };\n                const error = { propName, errorMsg: propValidation.requiredError };\n                const validatedObj = V.validateString(propValidation, propName, objToValidate);\n                assert.ok(V.containsError(error, validatedObj.errors));\n            });\n        });\n        describe('undefined', () => {\n            it('add default error msg when undefined', () => {\n                const propName = 'userName';\n                const propValidation = {\n                    required: true\n                };\n                const objToValidate = {\n                    [propName]: undefined\n                };\n                const validatedObj = V.validateString(propValidation, propName, objToValidate);\n                const error = { propName, errorMsg: V.allErrors.REQUIRED };\n                assert.ok(V.containsError(error, validatedObj.errors));\n            });\n            it('add custom error msg when undefined', () => {\n                const propName = 'userName';\n                const propValidation = {\n                    required: true,\n                    requiredError: 'CUSTOM_ERROR_MSG'\n                };\n                const objToValidate = {\n                    [propName]: undefined\n                };\n                const error = { propName, errorMsg: propValidation.requiredError };\n                const validatedObj = V.validateString(propValidation, propName, objToValidate);\n                assert.ok(V.containsError(error, validatedObj.errors));\n            });\n        });\n        describe('empty', () => {\n            it('add default error msg when null', () => {\n                const propName = 'userName';\n                const propValidation = {\n                    required: true\n                };\n                const objToValidate = {\n                    [propName]: ''\n                };\n                const validatedObj = V.validateString(propValidation, propName, objToValidate);\n                const error = { propName, errorMsg: V.allErrors.REQUIRED };\n                assert.ok(V.containsError(error, validatedObj.errors));\n            });\n            it('add custom error msg when null', () => {\n                const propName = 'userName';\n                const propValidation = {\n                    required: true,\n                    requiredError: 'CUSTOM_ERROR_MSG'\n                };\n                const objToValidate = {\n                    [propName]: ''\n                };\n                const error = { propName, errorMsg: propValidation.requiredError };\n                const validatedObj = V.validateString(propValidation, propName, objToValidate);\n                assert.ok(V.containsError(error, validatedObj.errors));\n            });\n        });\n        it('do NOT add error when not empty', () => {\n            const propName = 'userName';\n            const propValidation = {\n                required: true\n            };\n            const objToValidate = {\n                [propName]: 'angeloocana'\n            };\n            const validatedObj = V.validateString(propValidation, propName, objToValidate);\n            const error = { propName, errorMsg: V.allErrors.REQUIRED };\n            assert.notOk(V.containsError(error, validatedObj.errors));\n        });\n    });\n    describe('minLength', () => {\n        it('add default minLength error when less than minLength', () => {\n            const propName = 'userName';\n            const propValidation = {\n                minLength: 3\n            };\n            const objToValidate = {\n                [propName]: 'angeloocana'\n            };\n            const validatedObj = V.validateString(propValidation, propName, objToValidate);\n            const error = { propName, errorMsg: V.allErrors.MIN_LENGTH };\n            assert.notOk(V.containsError(error, validatedObj.errors));\n        });\n        it('add custom minLength error when less than minLength', () => {\n            const propName = 'userName';\n            const propValidation = {\n                minLength: 3,\n                minLengthError: 'CUSTOM_MIN_LENGTH_ERROR'\n            };\n            const objToValidate = {\n                [propName]: 'a'\n            };\n            const validatedObj = V.validateString(propValidation, propName, objToValidate);\n            const error = { propName, errorMsg: propValidation.minLengthError };\n            assert.ok(V.containsError(error, validatedObj.errors));\n        });\n        it('do NOT add minLength error when equal than minLength', () => {\n            const propName = 'userName';\n            const propValidation = {\n                minLength: 3\n            };\n            const objToValidate = {\n                [propName]: 'ang'\n            };\n            const validatedObj = V.validateString(propValidation, propName, objToValidate);\n            const error = { propName, errorMsg: V.allErrors.MIN_LENGTH };\n            assert.notOk(V.containsError(error, validatedObj.errors));\n        });\n        it('do NOT add minLength error when grater than minLength', () => {\n            const propName = 'userName';\n            const propValidation = {\n                minLength: 3\n            };\n            const objToValidate = {\n                [propName]: 'angeloocana'\n            };\n            const validatedObj = V.validateString(propValidation, propName, objToValidate);\n            const error = { propName, errorMsg: V.allErrors.MIN_LENGTH };\n            assert.notOk(V.containsError(error, validatedObj.errors));\n        });\n        it('do NOT add minLength error when null and not required', () => {\n            const propName = 'userName';\n            const propValidation = {\n                required: false,\n                minLength: 3\n            };\n            const objToValidate = {\n                [propName]: null\n            };\n            const validatedObj = V.validateString(propValidation, propName, objToValidate);\n            const error = { propName, errorMsg: V.allErrors.MIN_LENGTH };\n            assert.notOk(V.containsError(error, validatedObj.errors));\n        });\n    });\n    describe('maxLength', () => {\n        it('add default maxLength error when grater than maxLength', () => {\n            const propName = 'userName';\n            const propValidation = {\n                maxLength: 3\n            };\n            const objToValidate = {\n                [propName]: 'angeloocana'\n            };\n            const validatedObj = V.validateString(propValidation, propName, objToValidate);\n            const error = { propName, errorMsg: V.allErrors.MIN_LENGTH };\n            assert.ok(V.containsError(error, validatedObj.errors));\n        });\n        it('add custom maxLength error when grater than maxLength', () => {\n            const propName = 'userName';\n            const propValidation = {\n                maxLength: 3,\n                maxLengthError: 'CUSTOM_MAX_LENGTH_ERROR'\n            };\n            const objToValidate = {\n                [propName]: 'angeloocana'\n            };\n            const validatedObj = V.validateString(propValidation, propName, objToValidate);\n            const error = { propName, errorMsg: propValidation.maxLengthError };\n            assert.ok(V.containsError(error, validatedObj.errors));\n        });\n        it('do not add maxLength error when equal than maxLength', () => {\n            const propName = 'userName';\n            const propValidation = {\n                maxLength: 3\n            };\n            const objToValidate = {\n                [propName]: 'ang'\n            };\n            const validatedObj = V.validateString(propValidation, propName, objToValidate);\n            const error = { propName, errorMsg: V.allErrors.MAX_LENGTH };\n            assert.notOk(V.containsError(error, validatedObj.errors));\n        });\n        it('do NOT add maxLength error when less than maxLength', () => {\n            const propName = 'userName';\n            const propValidation = {\n                maxLength: 3\n            };\n            const objToValidate = {\n                [propName]: 'an'\n            };\n            const validatedObj = V.validateString(propValidation, propName, objToValidate);\n            const error = { propName, errorMsg: V.allErrors.MAX_LENGTH };\n            assert.notOk(V.containsError(error, validatedObj.errors));\n        });\n        it('do NOT add maxLength error when null and not required', () => {\n            const propName = 'userName';\n            const propValidation = {\n                required: false,\n                maxLength: 3\n            };\n            const objToValidate = {\n                [propName]: null\n            };\n            const validatedObj = V.validateString(propValidation, propName, objToValidate);\n            const error = { propName, errorMsg: V.allErrors.MAX_LENGTH };\n            assert.notOk(V.containsError(error, validatedObj.errors));\n        });\n    });\n    it('toLowerCase', () => {\n        const propName = 'userName';\n        const propValidation = {\n            toLowerCase: true\n        };\n        const objToValidate = {\n            [propName]: 'ANGELOOCANA'\n        };\n        const validatedObj = V.validateString(propValidation, propName, objToValidate);\n        assert.equal(validatedObj[propName], 'angeloocana');\n    });\n    it('toUpperCase', () => {\n        const propName = 'userName';\n        const propValidation = {\n            toUpperCase: true\n        };\n        const objToValidate = {\n            [propName]: 'angeloocana'\n        };\n        const validatedObj = V.validateString(propValidation, propName, objToValidate);\n        assert.equal(validatedObj[propName], 'ANGELOOCANA');\n    });\n});\n//# sourceMappingURL=validateString.test.js.map"]}