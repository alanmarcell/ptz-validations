{"version":3,"sources":["../dist-esnext/validate.test.js"],"names":["assert","V","describe","it","createUser","validate","userName","required","min","max","user","error","propName","errorMsg","allErrors","REQUIRED","ok","containsError","errors","emptyArray","validateUser","id","generateId","displayName","isString","toLowerCase","password","email","isEmail","weight","isNumber","birthday","isDate","Date","expectedUser","equal","toString","deepEqual","notOk"],"mappings":"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","file":"validate.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport * as V from './index';\ndescribe('validate', () => {\n    it('invalid user', () => {\n        const createUser = V.validate({\n            userName: [\n                V.required,\n                V.min(3),\n                V.max(30)\n            ]\n        });\n        const user = createUser({});\n        const error = { propName: 'userName', errorMsg: V.allErrors.REQUIRED };\n        assert.ok(V.containsError(error, user.errors));\n    });\n    it('valid user', () => {\n        const createUser = V.validate({\n            userName: [\n                V.required,\n                V.min(3),\n                V.max(30)\n            ]\n        });\n        const user = createUser({ userName: 'angeloocana' });\n        assert.emptyArray(user.errors);\n    });\n    it('createUser example', () => {\n        const validateUser = V.validate({\n            id: [\n                V.generateId\n            ],\n            displayName: [\n                V.required,\n                V.isString,\n                V.min(2),\n                V.max(100)\n            ],\n            userName: [\n                V.required,\n                V.isString,\n                V.min(2),\n                V.max(40),\n                V.toLowerCase\n            ],\n            password: [\n                V.required,\n                V.isString,\n                V.min(6),\n                V.max(40)\n            ],\n            email: [\n                V.required,\n                V.isEmail\n            ],\n            weight: [\n                V.isNumber,\n                V.min(1),\n                V.max(1000)\n            ],\n            birthday: [\n                V.isDate,\n                V.min(new Date('1800-01-01')),\n                V.max(new Date())\n            ]\n        });\n        const user = validateUser({\n            userName: 'angeloocana',\n            password: 'abcd',\n            email: 'angeloocana@gmail.com',\n            weight: 90,\n            birthday: '1992-06-28'\n        });\n        const expectedUser = {\n            id: 'hfk397d',\n            userName: 'angeloocana',\n            password: 'abcd',\n            email: 'angeloocana@gmail.com',\n            weight: 90,\n            birthday: new Date('1992-06-28'),\n            errors: [{\n                    propName: 'displayName',\n                    errorMsg: 'ERROR_REQUIRED'\n                }, {\n                    propName: 'password',\n                    errorMsg: 'ERROR_MIN'\n                }]\n        };\n        assert.ok(user.id, 'generate id');\n        assert.equal(user.userName, expectedUser.userName, 'set userName');\n        assert.equal(user.password, expectedUser.password, 'set password');\n        assert.equal(user.email, expectedUser.email, 'set email');\n        assert.equal(user.weight, expectedUser.weight, 'set weight');\n        assert.equal(user.birthday.toString(), expectedUser.birthday.toString(), 'set birthday');\n        assert.deepEqual(user.errors, expectedUser.errors, 'add errors');\n    });\n    it('createUser null username', () => {\n        const validateUser = V.validate({\n            id: [\n                V.generateId\n            ],\n            displayName: [\n                V.required,\n                V.isString,\n                V.min(2),\n                V.max(100)\n            ],\n            userName: [\n                V.required,\n                V.isString,\n                V.min(2),\n                V.max(40),\n                V.toLowerCase\n            ],\n            password: [\n                V.required,\n                V.isString,\n                V.min(6),\n                V.max(40)\n            ],\n            email: [\n                V.required,\n                V.isEmail\n            ],\n            weight: [\n                V.isNumber,\n                V.min(1),\n                V.max(1000)\n            ],\n            birthday: [\n                V.isDate,\n                V.min(new Date('1800-01-01')),\n                V.max(new Date())\n            ]\n        });\n        const user = validateUser({\n            userName: null,\n            password: 'abcd',\n            email: 'angeloocana@gmail.com',\n            weight: 90,\n            birthday: '1992-06-28'\n        });\n        assert.notOk(user);\n    });\n});\n//# sourceMappingURL=validate.test.js.map"]}