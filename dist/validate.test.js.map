{"version":3,"sources":["../dist-esnext/validate.test.js"],"names":["describe","it","propName","propValidation","required","context","validate","data","errors","errorMsg","REQUIRED","requiredError","undefined","minLength","MIN_LENGTH","minLengthError","maxLength","MAX_LENGTH","maxLengthError","toLowerCase","toUpperCase","INVALID_EMAIL"],"mappings":";;AAAA;;AACA;;AACAA,SAAS,UAAT,EAAqB,YAAM;AACvBA,aAAS,QAAT,EAAmB,YAAM;AACrBA,iBAAS,UAAT,EAAqB,YAAM;AACvBA,qBAAS,MAAT,EAAiB,YAAM;AACnBC,mBAAG,oCAAH,EAAyC,YAAM;AAC3C,wBAAMC,WAAW,UAAjB;AACA,wBAAMC,iBAAiB;AACnBC,kCAAU;AADS,qBAAvB;AAGA,wBAAMC,UAAU,2BAAeF,cAAf,EAA+BG,QAA/B,CAAwC;AACpDC,8BAAM,IAD8C;AAEpDL;AAFoD,qBAAxC,CAAhB;AAIA,0CAAMG,QAAQG,MAAR,CAAe,CAAf,EAAkBC,QAAxB,EAAkC,iBAAUC,QAA5C;AACA,0CAAML,QAAQG,MAAR,CAAe,CAAf,EAAkBN,QAAxB,EAAkCA,QAAlC;AACH,iBAXD;AAYAD,mBAAG,mCAAH,EAAwC,YAAM;AAC1C,wBAAMC,WAAW,UAAjB;AACA,wBAAMC,iBAAiB;AACnBC,kCAAU,IADS;AAEnBO,uCAAe;AAFI,qBAAvB;AAIA,wBAAMN,UAAU,2BAAeF,cAAf,EAA+BG,QAA/B,CAAwC;AACpDC,8BAAM,IAD8C;AAEpDL;AAFoD,qBAAxC,CAAhB;AAIA,0CAAMG,QAAQG,MAAR,CAAe,CAAf,EAAkBC,QAAxB,EAAkCN,eAAeQ,aAAjD;AACA,0CAAMN,QAAQG,MAAR,CAAe,CAAf,EAAkBN,QAAxB,EAAkCA,QAAlC;AACH,iBAZD;AAaH,aA1BD;AA2BAF,qBAAS,WAAT,EAAsB,YAAM;AACxBC,mBAAG,yCAAH,EAA8C,YAAM;AAChD,wBAAMC,WAAW,UAAjB;AACA,wBAAMC,iBAAiB;AACnBC,kCAAU;AADS,qBAAvB;AAGA,wBAAMC,UAAU,2BAAeF,cAAf,EAA+BG,QAA/B,CAAwC;AACpDC,8BAAMK,SAD8C;AAEpDV;AAFoD,qBAAxC,CAAhB;AAIA,0CAAMG,QAAQG,MAAR,CAAe,CAAf,EAAkBC,QAAxB,EAAkC,iBAAUC,QAA5C;AACA,0CAAML,QAAQG,MAAR,CAAe,CAAf,EAAkBN,QAAxB,EAAkCA,QAAlC;AACH,iBAXD;AAYAD,mBAAG,wCAAH,EAA6C,YAAM;AAC/C,wBAAMC,WAAW,UAAjB;AACA,wBAAMC,iBAAiB;AACnBC,kCAAU,IADS;AAEnBO,uCAAe;AAFI,qBAAvB;AAIA,wBAAMN,UAAU,2BAAeF,cAAf,EAA+BG,QAA/B,CAAwC;AACpDC,8BAAMK,SAD8C;AAEpDV;AAFoD,qBAAxC,CAAhB;AAIA,0CAAMG,QAAQG,MAAR,CAAe,CAAf,EAAkBC,QAAxB,EAAkCN,eAAeQ,aAAjD;AACA,0CAAMN,QAAQG,MAAR,CAAe,CAAf,EAAkBN,QAAxB,EAAkCA,QAAlC;AACH,iBAZD;AAaH,aA1BD;AA2BAF,qBAAS,OAAT,EAAkB,YAAM;AACpBC,mBAAG,qCAAH,EAA0C,YAAM;AAC5C,wBAAMC,WAAW,UAAjB;AACA,wBAAMC,iBAAiB;AACnBC,kCAAU;AADS,qBAAvB;AAGA,wBAAMC,UAAU,2BAAeF,cAAf,EAA+BG,QAA/B,CAAwC;AACpDC,8BAAM,EAD8C;AAEpDL;AAFoD,qBAAxC,CAAhB;AAIA,0CAAMG,QAAQG,MAAR,CAAe,CAAf,EAAkBC,QAAxB,EAAkC,iBAAUC,QAA5C;AACA,0CAAML,QAAQG,MAAR,CAAe,CAAf,EAAkBN,QAAxB,EAAkCA,QAAlC;AACH,iBAXD;AAYAD,mBAAG,oCAAH,EAAyC,YAAM;AAC3C,wBAAMC,WAAW,UAAjB;AACA,wBAAMC,iBAAiB;AACnBC,kCAAU,IADS;AAEnBO,uCAAe;AAFI,qBAAvB;AAIA,wBAAMN,UAAU,2BAAeF,cAAf,EAA+BG,QAA/B,CAAwC;AACpDC,8BAAM,EAD8C;AAEpDL;AAFoD,qBAAxC,CAAhB;AAIA,0CAAMG,QAAQG,MAAR,CAAe,CAAf,EAAkBC,QAAxB,EAAkCN,eAAeQ,aAAjD;AACA,0CAAMN,QAAQG,MAAR,CAAe,CAAf,EAAkBN,QAAxB,EAAkCA,QAAlC;AACH,iBAZD;AAaH,aA1BD;AA2BAD,eAAG,oCAAH,EAAyC,YAAM;AAC3C,oBAAMC,WAAW,UAAjB;AACA,oBAAMC,iBAAiB;AACnBC,8BAAU;AADS,iBAAvB;AAGA,oBAAMC,UAAU,2BAAeF,cAAf,EAA+BG,QAA/B,CAAwC;AACpDC,0BAAM,aAD8C;AAEpDL;AAFoD,iBAAxC,CAAhB;AAIA,2CAAWG,QAAQG,MAAnB;AACH,aAVD;AAWH,SA7FD;AA8FAR,iBAAS,WAAT,EAAsB,YAAM;AACxBC,eAAG,yDAAH,EAA8D,YAAM;AAChE,oBAAMC,WAAW,UAAjB;AACA,oBAAMC,iBAAiB;AACnBU,+BAAW;AADQ,iBAAvB;AAGA,oBAAMR,UAAU,2BAAeF,cAAf,EAA+BG,QAA/B,CAAwC;AACpDC,0BAAM,IAD8C;AAEpDL;AAFoD,iBAAxC,CAAhB;AAIA,sCAAMG,QAAQG,MAAR,CAAe,CAAf,EAAkBC,QAAxB,EAAkC,iBAAUK,UAA5C;AACA,sCAAMT,QAAQG,MAAR,CAAe,CAAf,EAAkBN,QAAxB,EAAkCA,QAAlC;AACH,aAXD;AAYAD,eAAG,wDAAH,EAA6D,YAAM;AAC/D,oBAAMC,WAAW,UAAjB;AACA,oBAAMC,iBAAiB;AACnBU,+BAAW,CADQ;AAEnBE,oCAAgB;AAFG,iBAAvB;AAIA,oBAAMV,UAAU,2BAAeF,cAAf,EAA+BG,QAA/B,CAAwC;AACpDC,0BAAM,IAD8C;AAEpDL;AAFoD,iBAAxC,CAAhB;AAIA,sCAAMG,QAAQG,MAAR,CAAe,CAAf,EAAkBC,QAAxB,EAAkCN,eAAeY,cAAjD;AACA,sCAAMV,QAAQG,MAAR,CAAe,CAAf,EAAkBN,QAAxB,EAAkCA,QAAlC;AACH,aAZD;AAaAD,eAAG,yDAAH,EAA8D,YAAM;AAChE,oBAAMC,WAAW,UAAjB;AACA,oBAAMC,iBAAiB;AACnBU,+BAAW;AADQ,iBAAvB;AAGA,oBAAMR,UAAU,2BAAeF,cAAf,EAA+BG,QAA/B,CAAwC;AACpDC,0BAAM,KAD8C;AAEpDL;AAFoD,iBAAxC,CAAhB;AAIA,2CAAWG,QAAQG,MAAnB;AACH,aAVD;AAWAP,eAAG,2DAAH,EAAgE,YAAM;AAClE,oBAAMC,WAAW,UAAjB;AACA,oBAAMC,iBAAiB;AACnBU,+BAAW;AADQ,iBAAvB;AAGA,oBAAMR,UAAU,2BAAeF,cAAf,EAA+BG,QAA/B,CAAwC;AACpDC,0BAAM,OAD8C;AAEpDL;AAFoD,iBAAxC,CAAhB;AAIA,2CAAWG,QAAQG,MAAnB;AACH,aAVD;AAWAP,eAAG,0DAAH,EAA+D,YAAM;AACjE,oBAAMC,WAAW,UAAjB;AACA,oBAAMC,iBAAiB;AACnBC,8BAAU,KADS;AAEnBS,+BAAW;AAFQ,iBAAvB;AAIA,oBAAMR,UAAU,2BAAeF,cAAf,EAA+BG,QAA/B,CAAwC;AACpDC,0BAAM,IAD8C;AAEpDL;AAFoD,iBAAxC,CAAhB;AAIA,2CAAWG,QAAQG,MAAnB;AACH,aAXD;AAYH,SA5DD;AA6DAR,iBAAS,WAAT,EAAsB,YAAM;AACxBC,eAAG,4DAAH,EAAiE,YAAM;AACnE,oBAAMC,WAAW,UAAjB;AACA,oBAAMC,iBAAiB;AACnBa,+BAAW;AADQ,iBAAvB;AAGA,oBAAMX,UAAU,2BAAeF,cAAf,EAA+BG,QAA/B,CAAwC;AACpDC,0BAAM,MAD8C;AAEpDL;AAFoD,iBAAxC,CAAhB;AAIA,sCAAMG,QAAQG,MAAR,CAAe,CAAf,EAAkBC,QAAxB,EAAkC,iBAAUQ,UAA5C;AACA,sCAAMZ,QAAQG,MAAR,CAAe,CAAf,EAAkBN,QAAxB,EAAkCA,QAAlC;AACH,aAXD;AAYAD,eAAG,2DAAH,EAAgE,YAAM;AAClE,oBAAMC,WAAW,UAAjB;AACA,oBAAMC,iBAAiB;AACnBa,+BAAW,CADQ;AAEnBE,oCAAgB;AAFG,iBAAvB;AAIA,oBAAMb,UAAU,2BAAeF,cAAf,EAA+BG,QAA/B,CAAwC;AACpDC,0BAAM,MAD8C;AAEpDL;AAFoD,iBAAxC,CAAhB;AAIA,sCAAMG,QAAQG,MAAR,CAAe,CAAf,EAAkBC,QAAxB,EAAkCN,eAAee,cAAjD;AACA,sCAAMb,QAAQG,MAAR,CAAe,CAAf,EAAkBN,QAAxB,EAAkCA,QAAlC;AACH,aAZD;AAaAD,eAAG,yDAAH,EAA8D,YAAM;AAChE,oBAAMC,WAAW,UAAjB;AACA,oBAAMC,iBAAiB;AACnBa,+BAAW;AADQ,iBAAvB;AAGA,oBAAMX,UAAU,2BAAeF,cAAf,EAA+BG,QAA/B,CAAwC;AACpDC,0BAAM,KAD8C;AAEpDL;AAFoD,iBAAxC,CAAhB;AAIA,2CAAWG,QAAQG,MAAnB;AACH,aAVD;AAWAP,eAAG,wDAAH,EAA6D,YAAM;AAC/D,oBAAMC,WAAW,UAAjB;AACA,oBAAMC,iBAAiB;AACnBa,+BAAW;AADQ,iBAAvB;AAGA,oBAAMX,UAAU,2BAAeF,cAAf,EAA+BG,QAA/B,CAAwC;AACpDC,0BAAM,IAD8C;AAEpDL;AAFoD,iBAAxC,CAAhB;AAIA,2CAAWG,QAAQG,MAAnB;AACH,aAVD;AAWAP,eAAG,0DAAH,EAA+D,YAAM;AACjE,oBAAMC,WAAW,UAAjB;AACA,oBAAMC,iBAAiB;AACnBC,8BAAU,KADS;AAEnBY,+BAAW;AAFQ,iBAAvB;AAIA,oBAAMX,UAAU,2BAAeF,cAAf,EAA+BG,QAA/B,CAAwC;AACpDC,0BAAM,IAD8C;AAEpDL;AAFoD,iBAAxC,CAAhB;AAIA,2CAAWG,QAAQG,MAAnB;AACH,aAXD;AAYH,SA5DD;AA6DAP,WAAG,aAAH,EAAkB,YAAM;AACpB,gBAAMC,WAAW,UAAjB;AACA,gBAAMC,iBAAiB;AACnBgB,6BAAa;AADM,aAAvB;AAGA,gBAAMd,UAAU,2BAAeF,cAAf,EAA+BG,QAA/B,CAAwC;AACpDC,sBAAM,MAD8C;AAEpDL;AAFoD,aAAxC,CAAhB;AAIA,uCAAWG,QAAQG,MAAnB;AACA,kCAAMH,QAAQE,IAAd,EAAoB,MAApB;AACH,SAXD;AAYAN,WAAG,aAAH,EAAkB,YAAM;AACpB,gBAAMC,WAAW,UAAjB;AACA,gBAAMC,iBAAiB;AACnBiB,6BAAa;AADM,aAAvB;AAGA,gBAAMf,UAAU,2BAAeF,cAAf,EAA+BG,QAA/B,CAAwC;AACpDC,sBAAM,MAD8C;AAEpDL;AAFoD,aAAxC,CAAhB;AAIA,uCAAWG,QAAQG,MAAnB;AACA,kCAAMH,QAAQE,IAAd,EAAoB,MAApB;AACH,SAXD;AAYH,KAjPD;AAkPAP,aAAS,OAAT,EAAkB,YAAM;AACpBA,iBAAS,cAAT,EAAyB,YAAM;AAC3BC,eAAG,aAAH,EAAkB,YAAM;AACpB,mCAAG,yBAAa,sBAAb,CAAH;AACH,aAFD;AAGAA,eAAG,eAAH,EAAoB,YAAM;AACtB,sCAAM,yBAAa,qBAAb,CAAN;AACH,aAFD;AAGH,SAPD;AAQAD,iBAAS,eAAT,EAA0B,YAAM;AAC5BA,qBAAS,UAAT,EAAqB,YAAM;AACvBA,yBAAS,MAAT,EAAiB,YAAM;AACnBC,uBAAG,oCAAH,EAAyC,YAAM;AAC3C,4BAAMC,WAAW,OAAjB;AACA,4BAAMC,iBAAiB;AACnBC,sCAAU;AADS,yBAAvB;AAGA,4BAAMC,UAAU,0BAAcF,cAAd,EAA8BG,QAA9B,CAAuC;AACnDC,kCAAM,IAD6C;AAEnDL;AAFmD,yBAAvC,CAAhB;AAIA,8CAAMG,QAAQG,MAAR,CAAe,CAAf,EAAkBC,QAAxB,EAAkC,iBAAUC,QAA5C;AACA,8CAAML,QAAQG,MAAR,CAAe,CAAf,EAAkBN,QAAxB,EAAkCA,QAAlC;AACH,qBAXD;AAYAD,uBAAG,mCAAH,EAAwC,YAAM;AAC1C,4BAAMC,WAAW,OAAjB;AACA,4BAAMC,iBAAiB;AACnBC,sCAAU,IADS;AAEnBO,2CAAe;AAFI,yBAAvB;AAIA,4BAAMN,UAAU,0BAAcF,cAAd,EAA8BG,QAA9B,CAAuC;AACnDC,kCAAM,IAD6C;AAEnDL;AAFmD,yBAAvC,CAAhB;AAIA,8CAAMG,QAAQG,MAAR,CAAe,CAAf,EAAkBC,QAAxB,EAAkCN,eAAeQ,aAAjD;AACA,8CAAMN,QAAQG,MAAR,CAAe,CAAf,EAAkBN,QAAxB,EAAkCA,QAAlC;AACH,qBAZD;AAaH,iBA1BD;AA2BAF,yBAAS,WAAT,EAAsB,YAAM;AACxBC,uBAAG,yCAAH,EAA8C,YAAM;AAChD,4BAAMC,WAAW,OAAjB;AACA,4BAAMC,iBAAiB;AACnBC,sCAAU;AADS,yBAAvB;AAGA,4BAAMC,UAAU,0BAAcF,cAAd,EAA8BG,QAA9B,CAAuC;AACnDC,kCAAMK,SAD6C;AAEnDV;AAFmD,yBAAvC,CAAhB;AAIA,8CAAMG,QAAQG,MAAR,CAAe,CAAf,EAAkBC,QAAxB,EAAkC,iBAAUC,QAA5C;AACA,8CAAML,QAAQG,MAAR,CAAe,CAAf,EAAkBN,QAAxB,EAAkCA,QAAlC;AACH,qBAXD;AAYAD,uBAAG,wCAAH,EAA6C,YAAM;AAC/C,4BAAMC,WAAW,OAAjB;AACA,4BAAMC,iBAAiB;AACnBC,sCAAU,IADS;AAEnBO,2CAAe;AAFI,yBAAvB;AAIA,4BAAMN,UAAU,0BAAcF,cAAd,EAA8BG,QAA9B,CAAuC;AACnDC,kCAAMK,SAD6C;AAEnDV;AAFmD,yBAAvC,CAAhB;AAIA,8CAAMG,QAAQG,MAAR,CAAe,CAAf,EAAkBC,QAAxB,EAAkCN,eAAeQ,aAAjD;AACA,8CAAMN,QAAQG,MAAR,CAAe,CAAf,EAAkBN,QAAxB,EAAkCA,QAAlC;AACH,qBAZD;AAaH,iBA1BD;AA2BAF,yBAAS,OAAT,EAAkB,YAAM;AACpBC,uBAAG,qCAAH,EAA0C,YAAM;AAC5C,4BAAMC,WAAW,OAAjB;AACA,4BAAMC,iBAAiB;AACnBC,sCAAU;AADS,yBAAvB;AAGA,4BAAMC,UAAU,0BAAcF,cAAd,EAA8BG,QAA9B,CAAuC;AACnDC,kCAAM,EAD6C;AAEnDL;AAFmD,yBAAvC,CAAhB;AAIA,8CAAMG,QAAQG,MAAR,CAAe,CAAf,EAAkBC,QAAxB,EAAkC,iBAAUC,QAA5C;AACA,8CAAML,QAAQG,MAAR,CAAe,CAAf,EAAkBN,QAAxB,EAAkCA,QAAlC;AACH,qBAXD;AAYAD,uBAAG,oCAAH,EAAyC,YAAM;AAC3C,4BAAMC,WAAW,OAAjB;AACA,4BAAMC,iBAAiB;AACnBC,sCAAU,IADS;AAEnBO,2CAAe;AAFI,yBAAvB;AAIA,4BAAMN,UAAU,0BAAcF,cAAd,EAA8BG,QAA9B,CAAuC;AACnDC,kCAAM,EAD6C;AAEnDL;AAFmD,yBAAvC,CAAhB;AAIA,8CAAMG,QAAQG,MAAR,CAAe,CAAf,EAAkBC,QAAxB,EAAkCN,eAAeQ,aAAjD;AACA,8CAAMN,QAAQG,MAAR,CAAe,CAAf,EAAkBN,QAAxB,EAAkCA,QAAlC;AACH,qBAZD;AAaH,iBA1BD;AA2BAD,mBAAG,oCAAH,EAAyC,YAAM;AAC3C,wBAAMC,WAAW,OAAjB;AACA,wBAAMC,iBAAiB;AACnBC,kCAAU;AADS,qBAAvB;AAGA,wBAAMC,UAAU,0BAAcF,cAAd,EAA8BG,QAA9B,CAAuC;AACnDC,8BAAM,uBAD6C;AAEnDL;AAFmD,qBAAvC,CAAhB;AAIA,+CAAWG,QAAQG,MAAnB;AACH,iBAVD;AAWH,aA7FD;AA8FAR,qBAAS,iCAAT,EAA4C,YAAM;AAC9C,oBAAME,WAAW,OAAjB;AACA,oBAAMC,iBAAiB;AACnBC,8BAAU;AADS,iBAAvB;AAGA,oBAAMC,UAAU,0BAAcF,cAAd,EAA8BG,QAA9B,CAAuC;AACnDC,0BAAM,MAD6C;AAEnDL;AAFmD,iBAAvC,CAAhB;AAIA,sCAAMG,QAAQG,MAAR,CAAe,CAAf,EAAkBC,QAAxB,EAAkC,iBAAUY,aAA5C;AACA,sCAAMhB,QAAQG,MAAR,CAAe,CAAf,EAAkBN,QAAxB,EAAkCA,QAAlC;AACH,aAXD;AAYH,SA3GD;AA4GH,KArHD;AAsHH,CAzWD;AA0WA","file":"validate.test.js","sourcesContent":["import { emptyArray, equal, notOk, ok } from 'ptz-assert';\nimport { allErrors, isValidEmail, validateEmail, validateString } from './index';\ndescribe('validate', () => {\n    describe('String', () => {\n        describe('required', () => {\n            describe('null', () => {\n                it('return default error msg when null', () => {\n                    const propName = 'userName';\n                    const propValidation = {\n                        required: true\n                    };\n                    const context = validateString(propValidation).validate({\n                        data: null,\n                        propName\n                    });\n                    equal(context.errors[0].errorMsg, allErrors.REQUIRED);\n                    equal(context.errors[0].propName, propName);\n                });\n                it('return custom error msg when null', () => {\n                    const propName = 'userName';\n                    const propValidation = {\n                        required: true,\n                        requiredError: 'CUSTOM_ERROR_MSG'\n                    };\n                    const context = validateString(propValidation).validate({\n                        data: null,\n                        propName\n                    });\n                    equal(context.errors[0].errorMsg, propValidation.requiredError);\n                    equal(context.errors[0].propName, propName);\n                });\n            });\n            describe('undefined', () => {\n                it('return default error msg when undefined', () => {\n                    const propName = 'userName';\n                    const propValidation = {\n                        required: true\n                    };\n                    const context = validateString(propValidation).validate({\n                        data: undefined,\n                        propName\n                    });\n                    equal(context.errors[0].errorMsg, allErrors.REQUIRED);\n                    equal(context.errors[0].propName, propName);\n                });\n                it('return custom error msg when undefined', () => {\n                    const propName = 'userName';\n                    const propValidation = {\n                        required: true,\n                        requiredError: 'CUSTOM_ERROR_MSG'\n                    };\n                    const context = validateString(propValidation).validate({\n                        data: undefined,\n                        propName\n                    });\n                    equal(context.errors[0].errorMsg, propValidation.requiredError);\n                    equal(context.errors[0].propName, propName);\n                });\n            });\n            describe('empty', () => {\n                it('return default error msg when empty', () => {\n                    const propName = 'userName';\n                    const propValidation = {\n                        required: true\n                    };\n                    const context = validateString(propValidation).validate({\n                        data: '',\n                        propName\n                    });\n                    equal(context.errors[0].errorMsg, allErrors.REQUIRED);\n                    equal(context.errors[0].propName, propName);\n                });\n                it('return custom error msg when empty', () => {\n                    const propName = 'userName';\n                    const propValidation = {\n                        required: true,\n                        requiredError: 'CUSTOM_ERROR_MSG'\n                    };\n                    const context = validateString(propValidation).validate({\n                        data: '',\n                        propName\n                    });\n                    equal(context.errors[0].errorMsg, propValidation.requiredError);\n                    equal(context.errors[0].propName, propName);\n                });\n            });\n            it('do not return error when not empty', () => {\n                const propName = 'userName';\n                const propValidation = {\n                    required: true\n                };\n                const context = validateString(propValidation).validate({\n                    data: 'angeloocana',\n                    propName\n                });\n                emptyArray(context.errors);\n            });\n        });\n        describe('minLength', () => {\n            it('return default minLength error when less than minLength', () => {\n                const propName = 'userName';\n                const propValidation = {\n                    minLength: 3\n                };\n                const context = validateString(propValidation).validate({\n                    data: 'ab',\n                    propName\n                });\n                equal(context.errors[0].errorMsg, allErrors.MIN_LENGTH);\n                equal(context.errors[0].propName, propName);\n            });\n            it('return custom minLength error when less than minLength', () => {\n                const propName = 'userName';\n                const propValidation = {\n                    minLength: 3,\n                    minLengthError: 'CUSTOM_MIN_LENGTH_ERROR'\n                };\n                const context = validateString(propValidation).validate({\n                    data: 'ab',\n                    propName\n                });\n                equal(context.errors[0].errorMsg, propValidation.minLengthError);\n                equal(context.errors[0].propName, propName);\n            });\n            it('do not return minLength error when equal than minLength', () => {\n                const propName = 'userName';\n                const propValidation = {\n                    minLength: 3\n                };\n                const context = validateString(propValidation).validate({\n                    data: 'abc',\n                    propName\n                });\n                emptyArray(context.errors);\n            });\n            it('do not return minLength error when grather than minLength', () => {\n                const propName = 'userName';\n                const propValidation = {\n                    minLength: 3\n                };\n                const context = validateString(propValidation).validate({\n                    data: 'abcde',\n                    propName\n                });\n                emptyArray(context.errors);\n            });\n            it('do not return minLength error when null and not required', () => {\n                const propName = 'userName';\n                const propValidation = {\n                    required: false,\n                    minLength: 3\n                };\n                const context = validateString(propValidation).validate({\n                    data: null,\n                    propName\n                });\n                emptyArray(context.errors);\n            });\n        });\n        describe('maxLength', () => {\n            it('return default maxLength error when grather than maxLength', () => {\n                const propName = 'userName';\n                const propValidation = {\n                    maxLength: 3\n                };\n                const context = validateString(propValidation).validate({\n                    data: 'abcd',\n                    propName\n                });\n                equal(context.errors[0].errorMsg, allErrors.MAX_LENGTH);\n                equal(context.errors[0].propName, propName);\n            });\n            it('return custom maxLength error when grather than maxLength', () => {\n                const propName = 'userName';\n                const propValidation = {\n                    maxLength: 3,\n                    maxLengthError: 'CUSTOM_MAX_LENGTH_ERROR'\n                };\n                const context = validateString(propValidation).validate({\n                    data: 'abcd',\n                    propName\n                });\n                equal(context.errors[0].errorMsg, propValidation.maxLengthError);\n                equal(context.errors[0].propName, propName);\n            });\n            it('do not return maxLength error when equal than maxLength', () => {\n                const propName = 'userName';\n                const propValidation = {\n                    maxLength: 3\n                };\n                const context = validateString(propValidation).validate({\n                    data: 'abc',\n                    propName\n                });\n                emptyArray(context.errors);\n            });\n            it('do not return maxLength error when less than maxLength', () => {\n                const propName = 'userName';\n                const propValidation = {\n                    maxLength: 3\n                };\n                const context = validateString(propValidation).validate({\n                    data: 'ab',\n                    propName\n                });\n                emptyArray(context.errors);\n            });\n            it('do not return maxLength error when null and not required', () => {\n                const propName = 'userName';\n                const propValidation = {\n                    required: false,\n                    maxLength: 3\n                };\n                const context = validateString(propValidation).validate({\n                    data: null,\n                    propName\n                });\n                emptyArray(context.errors);\n            });\n        });\n        it('toLowerCase', () => {\n            const propName = 'userName';\n            const propValidation = {\n                toLowerCase: true\n            };\n            const context = validateString(propValidation).validate({\n                data: 'AbCd',\n                propName\n            });\n            emptyArray(context.errors);\n            equal(context.data, 'abcd');\n        });\n        it('toUpperCase', () => {\n            const propName = 'userName';\n            const propValidation = {\n                toUpperCase: true\n            };\n            const context = validateString(propValidation).validate({\n                data: 'AbCd',\n                propName\n            });\n            emptyArray(context.errors);\n            equal(context.data, 'ABCD');\n        });\n    });\n    describe('Email', () => {\n        describe('isValidEmail', () => {\n            it('Valid Email', () => {\n                ok(isValidEmail('alanmarcell@live.com'));\n            });\n            it('Invalid Email', () => {\n                notOk(isValidEmail('alanmarcelllive.com'));\n            });\n        });\n        describe('validateEmail', () => {\n            describe('required', () => {\n                describe('null', () => {\n                    it('return default error msg when null', () => {\n                        const propName = 'email';\n                        const propValidation = {\n                            required: true\n                        };\n                        const context = validateEmail(propValidation).validate({\n                            data: null,\n                            propName\n                        });\n                        equal(context.errors[0].errorMsg, allErrors.REQUIRED);\n                        equal(context.errors[0].propName, propName);\n                    });\n                    it('return custom error msg when null', () => {\n                        const propName = 'email';\n                        const propValidation = {\n                            required: true,\n                            requiredError: 'CUSTOM_ERROR_MSG'\n                        };\n                        const context = validateEmail(propValidation).validate({\n                            data: null,\n                            propName\n                        });\n                        equal(context.errors[0].errorMsg, propValidation.requiredError);\n                        equal(context.errors[0].propName, propName);\n                    });\n                });\n                describe('undefined', () => {\n                    it('return default error msg when undefined', () => {\n                        const propName = 'email';\n                        const propValidation = {\n                            required: true\n                        };\n                        const context = validateEmail(propValidation).validate({\n                            data: undefined,\n                            propName\n                        });\n                        equal(context.errors[0].errorMsg, allErrors.REQUIRED);\n                        equal(context.errors[0].propName, propName);\n                    });\n                    it('return custom error msg when undefined', () => {\n                        const propName = 'email';\n                        const propValidation = {\n                            required: true,\n                            requiredError: 'CUSTOM_ERROR_MSG'\n                        };\n                        const context = validateEmail(propValidation).validate({\n                            data: undefined,\n                            propName\n                        });\n                        equal(context.errors[0].errorMsg, propValidation.requiredError);\n                        equal(context.errors[0].propName, propName);\n                    });\n                });\n                describe('empty', () => {\n                    it('return default error msg when empty', () => {\n                        const propName = 'email';\n                        const propValidation = {\n                            required: true\n                        };\n                        const context = validateEmail(propValidation).validate({\n                            data: '',\n                            propName\n                        });\n                        equal(context.errors[0].errorMsg, allErrors.REQUIRED);\n                        equal(context.errors[0].propName, propName);\n                    });\n                    it('return custom error msg when empty', () => {\n                        const propName = 'email';\n                        const propValidation = {\n                            required: true,\n                            requiredError: 'CUSTOM_ERROR_MSG'\n                        };\n                        const context = validateEmail(propValidation).validate({\n                            data: '',\n                            propName\n                        });\n                        equal(context.errors[0].errorMsg, propValidation.requiredError);\n                        equal(context.errors[0].propName, propName);\n                    });\n                });\n                it('do not return error when not empty', () => {\n                    const propName = 'email';\n                    const propValidation = {\n                        required: true\n                    };\n                    const context = validateEmail(propValidation).validate({\n                        data: 'angeloocana@gmail.com',\n                        propName\n                    });\n                    emptyArray(context.errors);\n                });\n            });\n            describe('return error when invalid email', () => {\n                const propName = 'email';\n                const propValidation = {\n                    required: false\n                };\n                const context = validateEmail(propValidation).validate({\n                    data: 'abcd',\n                    propName\n                });\n                equal(context.errors[0].errorMsg, allErrors.INVALID_EMAIL);\n                equal(context.errors[0].propName, propName);\n            });\n        });\n    });\n});\n//# sourceMappingURL=validate.test.js.map"]}