{"version":3,"sources":["../dist-esnext/validate.test.js"],"names":["assert","V","describe","validateUser","validate","id","generateId","displayName","required","isString","min","max","userName","toLowerCase","password","email","isEmail","weight","isNumber","birthday","isDate","Date","createUser","it","user","error","propName","errorMsg","allErrors","REQUIRED","ok","containsError","errors","emptyArray","expectedUser","equal","toString","deepEqual","throws"],"mappings":"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","file":"validate.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport * as V from './index';\ndescribe('validate', () => {\n    const validateUser = V.validate({\n        id: [\n            V.generateId\n        ],\n        displayName: [\n            V.required,\n            V.isString,\n            V.min(2),\n            V.max(100)\n        ],\n        userName: [\n            V.required,\n            V.isString,\n            V.min(2),\n            V.max(40),\n            V.toLowerCase\n        ],\n        password: [\n            V.required,\n            V.isString,\n            V.min(6),\n            V.max(40)\n        ],\n        email: [\n            V.required,\n            V.isEmail\n        ],\n        weight: [\n            V.isNumber,\n            V.min(1),\n            V.max(1000)\n        ],\n        birthday: [\n            V.isDate,\n            V.min(new Date('1800-01-01')),\n            V.max(new Date())\n        ]\n    });\n    const createUser = V.validate({\n        userName: [\n            V.required,\n            V.min(3),\n            V.max(30)\n        ]\n    });\n    it('invalid user', () => {\n        const user = createUser({});\n        const error = { propName: 'userName', errorMsg: V.allErrors.REQUIRED };\n        assert.ok(V.containsError(error, user.errors));\n    });\n    it('valid user', () => {\n        const user = createUser({ userName: 'angeloocana' });\n        assert.emptyArray(user.errors);\n    });\n    it('createUser example', () => {\n        const user = validateUser({\n            userName: 'angeloocana',\n            password: 'abcd',\n            email: 'angeloocana@gmail.com',\n            weight: 90,\n            birthday: '1992-06-28'\n        });\n        const expectedUser = {\n            id: 'hfk397d',\n            userName: 'angeloocana',\n            password: 'abcd',\n            email: 'angeloocana@gmail.com',\n            weight: 90,\n            birthday: new Date('1992-06-28'),\n            errors: [{\n                    propName: 'displayName',\n                    errorMsg: 'ERROR_REQUIRED'\n                }, {\n                    propName: 'password',\n                    errorMsg: 'ERROR_MIN'\n                }]\n        };\n        assert.ok(user.id, 'generate id');\n        assert.equal(user.userName, expectedUser.userName, 'set userName');\n        assert.equal(user.password, expectedUser.password, 'set password');\n        assert.equal(user.email, expectedUser.email, 'set email');\n        assert.equal(user.weight, expectedUser.weight, 'set weight');\n        assert.equal(user.birthday.toString(), expectedUser.birthday.toString(), 'set birthday');\n        assert.deepEqual(user.errors, expectedUser.errors, 'add errors');\n    });\n    it('createUser null username example', () => {\n        const user = validateUser({\n            userName: null,\n            password: 'abcd',\n            email: 'angeloocana@gmail.com',\n            weight: 90,\n            birthday: '1992-06-28'\n        });\n        const expectedUser = {\n            errors: [{\n                    propName: 'displayName',\n                    errorMsg: 'ERROR_REQUIRED'\n                }, {\n                    propName: 'userName',\n                    errorMsg: 'ERROR_REQUIRED'\n                }, {\n                    propName: 'password',\n                    errorMsg: 'ERROR_MIN'\n                }]\n        };\n        assert.ok(user);\n        assert.deepEqual(user.errors, expectedUser.errors, 'add errors');\n    });\n    it('error null args', () => {\n        assert.throws(() => validateUser(null));\n    });\n});\n//# sourceMappingURL=validate.test.js.map"]}