{"version":3,"sources":["../dist-esnext/validate.test.js"],"names":["assert","V","describe","createUser","validate","id","generateId","displayName","required","isString","min","max","userName","toLowerCase","password","email","isEmail","weight","isNumber","birthday","isDate","Date","it","user","error","propName","errorMsg","allErrors","REQUIRED","ok","containsError","errors","emptyArray","expectedUser","equal","toString","deepEqual"],"mappings":"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","file":"validate.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport * as V from './index';\ndescribe('validate', () => {\n    describe('createUser example', () => {\n        const createUser = V.validate({\n            id: [V.generateId],\n            displayName: [\n                V.required,\n                V.isString,\n                V.min(2),\n                V.max(100)\n            ],\n            userName: [\n                V.required,\n                V.isString,\n                V.min(2),\n                V.max(40),\n                V.toLowerCase\n            ],\n            password: [\n                V.required,\n                V.isString,\n                V.min(6),\n                V.max(40)\n            ],\n            email: [\n                V.required,\n                V.isEmail\n            ],\n            weight: [\n                V.isNumber,\n                V.min(1),\n                V.max(1000)\n            ],\n            birthday: [\n                V.isDate,\n                V.min(new Date('1800-01-01')),\n                V.max(new Date())\n            ]\n        });\n        it('empty user', () => {\n            const user = createUser({});\n            const error = { propName: 'userName', errorMsg: V.allErrors.REQUIRED };\n            assert.ok(V.containsError(error, user.errors));\n        });\n        it('valid user', () => {\n            const user = createUser({\n                userName: 'angeloocana',\n                displayName: 'Ângelo Ocanã',\n                email: 'angeloocana@gmail.com',\n                password: 'testtest'\n            });\n            assert.emptyArray(user.errors);\n        });\n        it('invalid user', () => {\n            const user = createUser({\n                userName: 'angeloocana',\n                password: 'abcd',\n                email: 'angeloocana@gmail.com',\n                weight: 90,\n                birthday: '1992-06-28'\n            });\n            const expectedUser = {\n                id: 'hfk397d',\n                userName: 'angeloocana',\n                password: 'abcd',\n                email: 'angeloocana@gmail.com',\n                weight: 90,\n                birthday: new Date('1992-06-28'),\n                errors: [{\n                        propName: 'displayName',\n                        errorMsg: 'ERROR_REQUIRED'\n                    }, {\n                        propName: 'password',\n                        errorMsg: 'ERROR_MIN'\n                    }]\n            };\n            assert.ok(user.id, 'generate id');\n            assert.equal(user.userName, expectedUser.userName, 'set userName');\n            assert.equal(user.password, expectedUser.password, 'set password');\n            assert.equal(user.email, expectedUser.email, 'set email');\n            assert.equal(user.weight, expectedUser.weight, 'set weight');\n            assert.equal(user.birthday.toString(), expectedUser.birthday.toString(), 'set birthday');\n            assert.deepEqual(user.errors, expectedUser.errors, 'add errors');\n        });\n        it('null user', () => {\n            const user = createUser(null);\n            const expectedUser = {\n                id: 'SkSxEoEQE-',\n                errors: [{ propName: 'displayName', errorMsg: 'ERROR_REQUIRED' },\n                    { propName: 'userName', errorMsg: 'ERROR_REQUIRED' },\n                    { propName: 'password', errorMsg: 'ERROR_REQUIRED' },\n                    { propName: 'email', errorMsg: 'ERROR_REQUIRED' },\n                    { propName: 'email', errorMsg: 'ERROR_INVALID_EMAIL' }]\n            };\n            assert.ok(user.id);\n            assert.deepEqual(user.errors, expectedUser.errors);\n        });\n    });\n});\n//# sourceMappingURL=validate.test.js.map"]}