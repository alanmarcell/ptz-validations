{"version":3,"sources":["../dist-esnext/isEmail.js"],"names":["isValidEmail","test","isEmailWithError","curry","errorMsg","propName","obj","propValue","prop","isEmail","INVALID_EMAIL"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;;AAGO,IAAMA,sCAAe,gBAAEC,IAAF,CAAO,wJAAP,CAArB,C,CAAuL;AAC9L;;;;;;AAMA;AACO,IAAMC,8CAAmB,gBAAEC,KAAF,CAAQ,UAACC,QAAD,EAAWC,QAAX,EAAqBC,GAArB,EAA6B;AACjEA,QAAM,iCAAkBF,QAAlB,EAA4BC,QAA5B,EAAsCC,GAAtC,CAAN;AACAA,QAAM,8BAAYD,QAAZ,EAAsBC,GAAtB,CAAN;AACA,MAAMC,YAAY,gBAAEC,IAAF,CAAOH,QAAP,EAAiBC,GAAjB,CAAlB;AACA,SAAON,aAAaO,SAAb,IACDD,GADC,GAED,qBAASA,GAAT,EAAcD,QAAd,EAAwBD,QAAxB,CAFN;AAGH,CAP+B,CAAzB;AAQP;;;;;;AAMO,IAAMK,4BAAUP,iBAAiB,oBAAUQ,aAA3B,CAAhB;AACP","file":"isEmail.js","sourcesContent":["import R from 'ramda';\nimport allErrors from './allErrors';\nimport { addError } from './error';\nimport { isStringWithError } from './isString';\nimport { toLowerCase } from './toLowerCase';\n/**\n * returns true if an E-mail is valid.\n */\nexport const isValidEmail = R.test(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/); // tslint:disable-line:max-line-length\n/**\n * Validates E-mail prop of an object.\n *  - Checks if It is a string.\n *  - toLowerCase.\n *  - Checks if It is a valid E-mail.\n */\n// tslint:disable-line:max-line-length\nexport const isEmailWithError = R.curry((errorMsg, propName, obj) => {\n    obj = isStringWithError(errorMsg, propName, obj);\n    obj = toLowerCase(propName, obj);\n    const propValue = R.prop(propName, obj);\n    return isValidEmail(propValue)\n        ? obj\n        : addError(obj, propName, errorMsg);\n});\n/**\n * Validates E-mail prop of an object.\n *  - Checks if It is a string.\n *  - toLowerCase.\n *  - Checks if It is a valid E-mail.\n */\nexport const isEmail = isEmailWithError(allErrors.INVALID_EMAIL);\n//# sourceMappingURL=isEmail.js.map"]}