{"version":3,"sources":["../dist-esnext/index.test.js"],"names":["assert","V","describe","it","only","validateUser","validate","id","generateId","displayName","validateString","required","minLength","maxLength","userName","toLowerCase","password","email","validateEmail","weight","validateNumber","min","max","birthday","validateDate","Date","user","expectedUser","errors","propName","errorMsg","ok","equal","deepEqual"],"mappings":";;AAAA;;IAAYA,M;;AACZ;;IAAYC,C;;;;AACZC,SAAS,iBAAT,EAA4B,YAAM;AAC9BC,OAAGC,IAAH,CAAQ,oBAAR,EAA8B,YAAM;AAChC,YAAMC,eAAeJ,EAAEK,QAAF,CAAW;AAC5BC,gBAAIN,EAAEO,UADsB;AAE5BC,yBAAaR,EAAES,cAAF,CAAiB;AAC1BC,0BAAU,IADgB;AAE1BC,2BAAW,CAFe;AAG1BC,2BAAW;AAHe,aAAjB,CAFe;AAO5BC,sBAAUb,EAAES,cAAF,CAAiB;AACvBC,0BAAU,IADa;AAEvBC,2BAAW,CAFY;AAGvBC,2BAAW,EAHY;AAIvBE,6BAAa;AAJU,aAAjB,CAPkB;AAa5BC,sBAAUf,EAAES,cAAF,CAAiB;AACvBC,0BAAU,IADa;AAEvBC,2BAAW,CAFY;AAGvBC,2BAAW;AAHY,aAAjB,CAbkB;AAkB5BI,mBAAOhB,EAAEiB,aAAF,CAAgB;AACnBP,0BAAU;AADS,aAAhB,CAlBqB;AAqB5BQ,oBAAQlB,EAAEmB,cAAF,CAAiB;AACrBC,qBAAK,CADgB;AAErBC,qBAAK;AAFgB,aAAjB,CArBoB;AAyB5BC,sBAAUtB,EAAEuB,YAAF,CAAe;AACrBH,qBAAK,IAAII,IAAJ,CAAS,YAAT,CADgB;AAErBH,qBAAK,IAAIG,IAAJ;AAFgB,aAAf;AAzBkB,SAAX,CAArB;AA8BA,YAAMC,OAAOrB,aAAa;AACtBS,sBAAU,aADY;AAEtBE,sBAAU,MAFY;AAGtBC,mBAAO,uBAHe;AAItBE,oBAAQ,EAJc;AAKtBI,sBAAU;AALY,SAAb,CAAb;AAOA,YAAMI,eAAe;AACjBpB,gBAAI,SADa;AAEjBO,sBAAU,aAFO;AAGjBE,sBAAU,MAHO;AAIjBC,mBAAO,uBAJU;AAKjBE,oBAAQ,EALS;AAMjBI,sBAAU,YANO;AAOjBK,oBAAQ,CAAC;AACDC,0BAAU,aADT;AAEDC,0BAAU;AAFT,aAAD,EAGD;AACCD,0BAAU,UADX;AAECC,0BAAU;AAFX,aAHC;AAPS,SAArB;AAeA9B,eAAO+B,EAAP,CAAUL,KAAKnB,EAAf,EAAmB,aAAnB;AACAP,eAAOgC,KAAP,CAAaN,KAAKZ,QAAlB,EAA4Ba,aAAab,QAAzC,EAAmD,cAAnD;AACAd,eAAOgC,KAAP,CAAaN,KAAKV,QAAlB,EAA4BW,aAAaX,QAAzC,EAAmD,cAAnD;AACAhB,eAAOgC,KAAP,CAAaN,KAAKT,KAAlB,EAAyBU,aAAaV,KAAtC,EAA6C,WAA7C;AACAjB,eAAOgC,KAAP,CAAaN,KAAKP,MAAlB,EAA0BQ,aAAaR,MAAvC,EAA+C,YAA/C;AACAnB,eAAOgC,KAAP,CAAaN,KAAKH,QAAlB,EAA4BI,aAAaJ,QAAzC,EAAmD,cAAnD;AACAvB,eAAOiC,SAAP,CAAiBP,KAAKE,MAAtB,EAA8BD,aAAaC,MAA3C,EAAmD,YAAnD;AACH,KA5DD;AA6DH,CA9DD;AA+DA","file":"index.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport * as V from './index';\ndescribe('ptz-validations', () => {\n    it.only('createUser example', () => {\n        const validateUser = V.validate({\n            id: V.generateId,\n            displayName: V.validateString({\n                required: true,\n                minLength: 2,\n                maxLength: 100\n            }),\n            userName: V.validateString({\n                required: true,\n                minLength: 2,\n                maxLength: 40,\n                toLowerCase: true\n            }),\n            password: V.validateString({\n                required: true,\n                minLength: 6,\n                maxLength: 40\n            }),\n            email: V.validateEmail({\n                required: true\n            }),\n            weight: V.validateNumber({\n                min: 1,\n                max: 1000\n            }),\n            birthday: V.validateDate({\n                min: new Date('1800-01-01'),\n                max: new Date()\n            })\n        });\n        const user = validateUser({\n            userName: 'angeloocana',\n            password: 'abcd',\n            email: 'angeloocana@gmail.com',\n            weight: 90,\n            birthday: '1992-06-28'\n        });\n        const expectedUser = {\n            id: 'hfk397d',\n            userName: 'angeloocana',\n            password: 'abcd',\n            email: 'angeloocana@gmail.com',\n            weight: 90,\n            birthday: '1992-06-28',\n            errors: [{\n                    propName: 'displayName',\n                    errorMsg: 'ERROR_REQUIRED'\n                }, {\n                    propName: 'password',\n                    errorMsg: 'ERROR_MIN_LENGTH'\n                }]\n        };\n        assert.ok(user.id, 'generate id');\n        assert.equal(user.userName, expectedUser.userName, 'set userName');\n        assert.equal(user.password, expectedUser.password, 'set password');\n        assert.equal(user.email, expectedUser.email, 'set email');\n        assert.equal(user.weight, expectedUser.weight, 'set weight');\n        assert.equal(user.birthday, expectedUser.birthday, 'set birthday');\n        assert.deepEqual(user.errors, expectedUser.errors, 'add errors');\n    });\n});\n//# sourceMappingURL=index.test.js.map"]}