{"version":3,"sources":["../dist-esnext/validateEmail.test.js"],"names":["assert","V","describe","it","ok","isValidEmail","notOk","propName","propValidation","required","objToValidate","validatedObj","validateEmail","error","errorMsg","allErrors","REQUIRED","containsError","errors","requiredError","undefined","email","INVALID_EMAIL"],"mappings":"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","file":"validateEmail.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport * as V from './index';\ndescribe('validateEmail', () => {\n    describe('isValidEmail', () => {\n        it('Valid Email', () => {\n            assert.ok(V.isValidEmail('angeloocana@gmail.com'));\n        });\n        it('Invalid Email', () => {\n            assert.notOk(V.isValidEmail('angeloocana_gmail.com'));\n        });\n    });\n    describe('validateEmail', () => {\n        describe('required', () => {\n            describe('null', () => {\n                it('add default error msg when null', () => {\n                    const propName = 'email';\n                    const propValidation = {\n                        required: true\n                    };\n                    const objToValidate = {\n                        [propName]: null\n                    };\n                    const validatedObj = V.validateEmail(propValidation, propName, objToValidate);\n                    const error = { propName, errorMsg: V.allErrors.REQUIRED };\n                    assert.ok(V.containsError(error, validatedObj.errors));\n                });\n                it('add custom error msg when null', () => {\n                    const propName = 'email';\n                    const propValidation = {\n                        required: true,\n                        requiredError: 'CUSTOM_ERROR_MSG'\n                    };\n                    const objToValidate = {\n                        [propName]: null\n                    };\n                    const error = { propName, errorMsg: propValidation.requiredError };\n                    const validatedObj = V.validateEmail(propValidation, propName, objToValidate);\n                    assert.ok(V.containsError(error, validatedObj.errors));\n                });\n            });\n            describe('undefined', () => {\n                it('add default error msg when undefined', () => {\n                    const propName = 'email';\n                    const propValidation = {\n                        required: true\n                    };\n                    const objToValidate = {\n                        [propName]: undefined\n                    };\n                    const validatedObj = V.validateEmail(propValidation, propName, objToValidate);\n                    const error = { propName, errorMsg: V.allErrors.REQUIRED };\n                    assert.ok(V.containsError(error, validatedObj.errors));\n                });\n                it('add custom error msg when undefined', () => {\n                    const propName = 'email';\n                    const propValidation = {\n                        required: true,\n                        requiredError: 'CUSTOM_ERROR_MSG'\n                    };\n                    const objToValidate = {\n                        [propName]: undefined\n                    };\n                    const error = { propName, errorMsg: propValidation.requiredError };\n                    const validatedObj = V.validateEmail(propValidation, propName, objToValidate);\n                    assert.ok(V.containsError(error, validatedObj.errors));\n                });\n            });\n            describe('empty', () => {\n                it('add default error msg when null', () => {\n                    const propName = 'email';\n                    const propValidation = {\n                        required: true\n                    };\n                    const objToValidate = {\n                        [propName]: ''\n                    };\n                    const validatedObj = V.validateEmail(propValidation, propName, objToValidate);\n                    const error = { propName, errorMsg: V.allErrors.REQUIRED };\n                    assert.ok(V.containsError(error, validatedObj.errors));\n                });\n                it('add custom error msg when null', () => {\n                    const propName = 'email';\n                    const propValidation = {\n                        required: true,\n                        requiredError: 'CUSTOM_ERROR_MSG'\n                    };\n                    const objToValidate = {\n                        [propName]: ''\n                    };\n                    const error = { propName, errorMsg: propValidation.requiredError };\n                    const validatedObj = V.validateEmail(propValidation, propName, objToValidate);\n                    assert.ok(V.containsError(error, validatedObj.errors));\n                });\n            });\n            it('do NOT add error when not empty', () => {\n                const propName = 'email';\n                const propValidation = {\n                    required: true\n                };\n                const objToValidate = {\n                    [propName]: 'angeloocana'\n                };\n                const validatedObj = V.validateEmail(propValidation, propName, objToValidate);\n                const error = { propName, errorMsg: V.allErrors.REQUIRED };\n                assert.notOk(V.containsError(error, validatedObj.errors));\n            });\n        });\n        it('add error when invalid email', () => {\n            const propName = 'email';\n            const propValidation = {\n                required: false\n            };\n            const objToValidate = { email: 'angeloocana_gmail_com' };\n            const validatedObj = V.validateEmail(propValidation, propName, objToValidate);\n            const error = { propName, errorMsg: V.allErrors.INVALID_EMAIL };\n            assert.ok(V.containsError(error, validatedObj.errors));\n        });\n        it('do NOT add error when valid email', () => {\n            const propName = 'email';\n            const propValidation = {\n                required: false\n            };\n            const objToValidate = { email: 'angeloocana@gmail.com' };\n            const validatedObj = V.validateEmail(propValidation, propName, objToValidate);\n            const error = { propName, errorMsg: V.allErrors.INVALID_EMAIL };\n            assert.notOk(V.containsError(error, validatedObj.errors));\n        });\n    });\n});\n//# sourceMappingURL=validateEmail.test.js.map"]}