{"version":3,"sources":["../dist-esnext/HaveValidation.test.js"],"names":["describe","it","error","errorMsg","entity","addError","errors","errorArgs","error1","error2","error3","addErrors","isValid"],"mappings":"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","file":"HaveValidation.test.js","sourcesContent":["import { contains, containsNTimes, emptyArray, notOk, ok } from 'ptz-assert';\nimport { HaveValidation } from './index';\ndescribe('HaveValidation', () => {\n    describe('addError', () => {\n        it('do not throw error when args is null', () => {\n            const error = {\n                errorMsg: 'ERROR_'\n            };\n            const entity = new HaveValidation(null);\n            entity.addError(error);\n            contains(entity.errors, error);\n        });\n        it('do not throw error when args.errors is null', () => {\n            const error = {\n                errorMsg: 'ERROR_'\n            };\n            const entity = new HaveValidation({ errors: null });\n            entity.addError(error);\n            contains(entity.errors, error);\n        });\n        it('add errors from args.errors', () => {\n            const error = { errorMsg: 'ERROR_' };\n            const errorArgs = { errorMsg: 'ERROR_ANOTHER_ERROR' };\n            const entity = new HaveValidation({ errors: [errorArgs] });\n            entity.addError(error);\n            contains(entity.errors, errorArgs);\n            contains(entity.errors, error);\n        });\n        it('does not duplicate errors', () => {\n            const error = { errorMsg: 'ERROR_' };\n            const entity = new HaveValidation({ errors: [error] });\n            entity.addError(error);\n            containsNTimes(entity.errors, error, 1);\n        });\n        it('do not add null error', () => {\n            const entity = new HaveValidation({});\n            entity.addError(null);\n            emptyArray(entity.errors);\n        });\n    });\n    describe('addErrors', () => {\n        it('add 2 errors', () => {\n            const error1 = { errorMsg: 'ERROR_1' };\n            const error2 = { errorMsg: 'ERROR_2' };\n            const error3 = { errorMsg: 'ERROR_3' };\n            const entity = new HaveValidation({ errors: [error1] });\n            entity.addErrors([error2, error3]);\n            contains(entity.errors, error1, 'Error from args not added');\n            contains(entity.errors, error2);\n            contains(entity.errors, error3);\n        });\n        it('add no errors', () => {\n            const entity = new HaveValidation({});\n            entity.addErrors(null);\n            emptyArray(entity.errors);\n        });\n    });\n    describe('IsValid', () => {\n        it('should return true when errors is null', () => {\n            const entity = new HaveValidation({ errors: null });\n            ok(entity.isValid());\n        });\n        it('should return true when error is empty', () => {\n            const entity = new HaveValidation({ errors: [] });\n            ok(entity.isValid());\n        });\n        it('should return false when there are errors', () => {\n            const entity = new HaveValidation({ errors: [{ errorMsg: 'ERROR_ANOTHER_ERROR' }] });\n            notOk(entity.isValid());\n        });\n    });\n});\n//# sourceMappingURL=HaveValidation.test.js.map"]}