{"version":3,"sources":["../dist-esnext/isEmail.test.js"],"names":["assert","V","describe","it","ok","isValidEmail","notOk","propName","error","errorMsg","allErrors","INVALID_EMAIL","objToValidate","email","errors","validatedObj","isEmail","containsError"],"mappings":";;AAAA;;IAAYA,M;;AACZ;;IAAYC,C;;;;AACZC,SAAS,SAAT,EAAoB,YAAM;AACtBA,aAAS,cAAT,EAAyB,YAAM;AAC3BC,WAAG,aAAH,EAAkB,YAAM;AACpBH,mBAAOI,EAAP,CAAUH,EAAEI,YAAF,CAAe,uBAAf,CAAV;AACH,SAFD;AAGAF,WAAG,eAAH,EAAoB,YAAM;AACtBH,mBAAOM,KAAP,CAAaL,EAAEI,YAAF,CAAe,uBAAf,CAAb;AACH,SAFD;AAGH,KAPD;AAQAH,aAAS,SAAT,EAAoB,YAAM;AACtB,YAAMK,WAAW,OAAjB;AACA,YAAMC,QAAQ,EAAED,kBAAF,EAAYE,UAAUR,EAAES,SAAF,CAAYC,aAAlC,EAAd;AACAR,WAAG,8BAAH,EAAmC,YAAM;AACrC,gBAAMS,gBAAgB;AAClBC,uBAAO,uBADW;AAElBC,wBAAQ;AAFU,aAAtB;AAIA,gBAAMC,eAAed,EAAEe,OAAF,CAAUT,QAAV,EAAoBK,aAApB,CAArB;AACAZ,mBAAOI,EAAP,CAAUH,EAAEgB,aAAF,CAAgBT,KAAhB,EAAuBO,aAAaD,MAApC,CAAV;AACH,SAPD;AAQAX,WAAG,mCAAH,EAAwC,YAAM;AAC1C,gBAAMS,gBAAgB;AAClBC,uBAAO,uBADW;AAElBC,wBAAQ;AAFU,aAAtB;AAIA,gBAAMC,eAAed,EAAEe,OAAF,CAAUT,QAAV,EAAoBK,aAApB,CAArB;AACAZ,mBAAOM,KAAP,CAAaL,EAAEgB,aAAF,CAAgBT,KAAhB,EAAuBO,aAAaD,MAApC,CAAb;AACH,SAPD;AAQH,KAnBD;AAoBH,CA7BD;AA8BA","file":"isEmail.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport * as V from './index';\ndescribe('isEmail', () => {\n    describe('isValidEmail', () => {\n        it('Valid Email', () => {\n            assert.ok(V.isValidEmail('angeloocana@gmail.com'));\n        });\n        it('Invalid Email', () => {\n            assert.notOk(V.isValidEmail('angeloocana_gmail.com'));\n        });\n    });\n    describe('isEmail', () => {\n        const propName = 'email';\n        const error = { propName, errorMsg: V.allErrors.INVALID_EMAIL };\n        it('add error when invalid email', () => {\n            const objToValidate = {\n                email: 'angeloocana_gmail_com',\n                errors: []\n            };\n            const validatedObj = V.isEmail(propName, objToValidate);\n            assert.ok(V.containsError(error, validatedObj.errors));\n        });\n        it('do NOT add error when valid email', () => {\n            const objToValidate = {\n                email: 'angeloocana@gmail.com',\n                errors: []\n            };\n            const validatedObj = V.isEmail(propName, objToValidate);\n            assert.notOk(V.containsError(error, validatedObj.errors));\n        });\n    });\n});\n//# sourceMappingURL=isEmail.test.js.map"]}