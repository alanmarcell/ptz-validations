{"version":3,"sources":["../dist-esnext/validateEmail.js"],"names":["isValidEmail","test","validateEmail","curry","opts","propName","obj","stringOpts","required","requiredError","toLowerCase","propValue","prop","invalidEmailError","INVALID_EMAIL"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;AAGO,IAAMA,sCAAe,gBAAEC,IAAF,CAAO,wJAAP,CAArB,C,CAAuL;AAC9L;;;AAGA;AACO,IAAMC,wCAAgB,gBAAEC,KAAF,CAAQ,UAACC,IAAD,EAAOC,QAAP,EAAiBC,GAAjB,EAAyB;AAC1D,QAAMC,aAAa;AACfC,kBAAUJ,KAAKI,QADA;AAEfC,uBAAeL,KAAKK,aAFL;AAGfC,qBAAa;AAHE,KAAnB;AAKAJ,UAAM,oCAAeC,UAAf,EAA2BF,QAA3B,EAAqCC,GAArC,CAAN;AACA,QAAMK,YAAY,gBAAEC,IAAF,CAAOP,QAAP,EAAiBC,GAAjB,CAAlB;AACA,WAAON,aAAaW,SAAb,IACDL,GADC,GAED,qBAASA,GAAT,EAAcD,QAAd,EAAwBD,KAAKS,iBAAL,IAA0B,oBAAUC,aAA5D,CAFN;AAGH,CAX4B,CAAtB;AAYP","file":"validateEmail.js","sourcesContent":["import R from 'ramda';\nimport allErrors from './allErrors';\nimport { addError } from './error';\nimport { validateString } from './validateString';\n/**\n * Checks if an E-mail is valid.\n */\nexport const isValidEmail = R.test(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/); // tslint:disable-line:max-line-length\n/**\n * Validate an E-mail prop of an object.\n */\n// tslint:disable-line:max-line-length\nexport const validateEmail = R.curry((opts, propName, obj) => {\n    const stringOpts = {\n        required: opts.required,\n        requiredError: opts.requiredError,\n        toLowerCase: true\n    };\n    obj = validateString(stringOpts, propName, obj);\n    const propValue = R.prop(propName, obj);\n    return isValidEmail(propValue)\n        ? obj\n        : addError(obj, propName, opts.invalidEmailError || allErrors.INVALID_EMAIL);\n});\n//# sourceMappingURL=validateEmail.js.map"]}