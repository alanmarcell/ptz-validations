{"version":3,"sources":["../dist-esnext/isString.js"],"names":["isStringWithError","curry","errorMsg","propName","obj","propValue","prop","isNil","isString","INVALID_NUMBER_ERROR"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;AAGO,IAAMA,gDAAoB,gBAAEC,KAAF,CAAQ,UAACC,QAAD,EAAWC,QAAX,EAAqBC,GAArB,EAA6B;AAClE,MAAMC,YAAY,gBAAEC,IAAF,CAAOH,QAAP,EAAiBC,GAAjB,CAAlB;AACA,MAAI,gBAAEG,KAAF,CAAQF,SAAR,CAAJ,EACI,OAAOD,GAAP;AACJ,SAAO,OAAOC,SAAP,KAAqB,QAArB,GACDD,GADC,GAED,qBAASA,GAAT,EAAcD,QAAd,EAAwBD,QAAxB,CAFN;AAGH,CAPgC,CAA1B;AAQP;;;AAGO,IAAMM,8BAAWR,kBAAkB,oBAAUS,oBAA5B,CAAjB;AACP","file":"isString.js","sourcesContent":["import R from 'ramda';\nimport allErrors from './allErrors';\nimport { addError } from './error';\n/**\n * Validate String.\n */\nexport const isStringWithError = R.curry((errorMsg, propName, obj) => {\n    const propValue = R.prop(propName, obj);\n    if (R.isNil(propValue))\n        return obj;\n    return typeof propValue === 'string'\n        ? obj\n        : addError(obj, propName, errorMsg);\n});\n/**\n * Validate String.\n */\nexport const isString = isStringWithError(allErrors.INVALID_NUMBER_ERROR);\n//# sourceMappingURL=isString.js.map"]}